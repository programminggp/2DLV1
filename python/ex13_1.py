# 基本課題 1. ～ 2. のデータ・ファイル
#

d0 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9 ]

d1 = [ 8, 14, 13, 7, 15 ]

d2 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d3 = [
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d4 = [
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000
]


data = []

def to_bin(num, size):
    rtn = []
    for i in range(size):
        rtn.append(num%2)
        num //= 2
    return rtn

def get_min(bin):
    global data
    dist0 = 0
    dist = 0
    min = sum(data)
    first_1_pos = -1
    
    for i in range(len(bin)):
        if bin[i] == 1 and first_1_pos < 0:
            first_1_pos = i;
        if first_1_pos < 0:
            dist0 += data[i]
        else:
            if bin[i] == 1:
                if min > dist and dist > 0:
                    min = dist
                dist = data[i]
            else:
                dist += data[i]

    if bin[len(bin) - 1] == 0:
        dist += dist0
        if min > dist:
            min = dist
    else:
        if first_1_pos == 0:
            if min > dist:
                min = dist
        else:
            dist0 += dist
            if min > dist0:
                min = dist0
    return min


def main():
    global data
    
    data = d0   #使用するデータ
    
    size = len(data)
    result = []
    min_max = 0

    n = input("配置する見張りの人数 n = ")
    while int(n) > size:
        print("配置する見張りの人数が塔の数よりも多いです。")
        n = input("配置する見張りの人数 n = ")
    
    for i in range(1,2**size+1):
        bin = to_bin(i,size)
        if sum(bin) == int(n):
            min = get_min(bin)
            if min_max <= min:
                min_max = min
                result = bin
                print(result)
                print(min_max)
            #print(bin)
            #print(get_min(bin))

    print("見張りを配置する塔は、", end="")
    for i in range(len(result)):
        if result[i] == 1:
            print(f"{i+1}番目 ", end="")

    print(f"\nこの組み合わせでの塔間の距離の最小値は {min_max}")
    
    
if __name__ == "__main__":
    main()
