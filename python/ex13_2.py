# 基本課題 1. ～ 2. のデータ・ファイル
#

d0 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9 ]

d1 = [ 8, 14, 13, 7, 15 ]

d2 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d3 = [
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d4 = [
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000
]


data = []
dist = 0


def prev(i, guards, size):
    i -= 1
    if i < 0:
        i = size - 1
#    if guards[i] == 0:
#        return prev(i, guards, size)
    return i

def next(i, guards, size):
    i += 1
    if i >=size:
        i = 0
#    if guards[i] == 0:
#        return prev(i, guards, size)
    return i



def guard_on(i, data, base, guards, size):
    global dist

    if guards[i] == 0:
        guards[i] = 1
        p = prev(i, guards, size)
        if guards[p] == 1:
            data[p] -= base[i]
            if data[p] < dist:
                guard_off(p,data,base,guards, size)
                return True
    return False


def guard_off(i, data, base, guards, size):
    p = prev(i, guards, size)
    guards[i] = 0
    data[p] = data[p] + data[i]
#    data[p] = data[p] + base[i]
    return guard_on(p, data, base, guards, size)


def main():
    global data
    global dist
    
    data = d0   #使用するデータ
    base = data.copy()
    guards = [1] * len(data)

    print(guards[0])
    
    size = len(data)
    result = []
    min_max = 0

    n = input("配置する見張りの人数 n = ")
    n = int(n)
    while n > size:
        print("配置する見張りの人数が塔の数よりも多いです。")
        n = input("配置する見張りの人数 n = ")

    dist = min(data)
    for i in range(size - n + 1):
        lp = True
        while lp:
            #線形探索
            for j in range(size):
                if data[j] == dist:
                    if guards[j] == 1:
                        min_max = dist
                        print(guards)
                        print(data)
                        print(min_max)
                        p = prev(j, guards, size)
                        ne = next(j, guards, size)
                        if data[p] < data[ne] or guards[ne] == 0:
                            lp = guard_off(j, data, base, guards, size)
                        else:
                            lp = guard_off(ne, data, base, guards, size)                            

                        dist -= 1
                        break
                    #else:
                            
            dist += 1
            
    print(f"{n} 人を配置する時の塔間の距離の最小値は {min_max}")
    
    
if __name__ == "__main__":
    main()
